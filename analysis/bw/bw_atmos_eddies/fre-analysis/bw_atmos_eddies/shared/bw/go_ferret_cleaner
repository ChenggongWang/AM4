#!/bin/tcsh -f

set name = `basename $0`
set curdir = `pwd`
set memsize = 128

set argv = (`getopt m:o:w: $*`)
while ("$argv[1]" != "--")
  switch ($argv[1])
    case -m:
      set memsize = $argv[2]; shift argv; breaksw
    case -o:
       set outdir = `echo 'use Cwd qw(abs_path);print abs_path("'$argv[2]'");' | perl`; shift argv; breaksw
    case -w:
       set workdir = `echo 'use Cwd qw(abs_path);print abs_path("'$argv[2]'");' | perl`; shift argv; breaksw
  endsw
  shift argv
end
shift argv

if ($#argv == 0) then
   echo "No Ferret script file supplied."; goto err
else if (! -f $1) then
   echo "The Ferret script "\"$1\"" was not found."; goto err
else
   # get the absolute path to the ferret go script using perl function abs_path
   set ferret_script = `echo 'use Cwd qw(abs_path);print abs_path("'$1'");' | perl` || goto err
   shift argv
endif

# make sure ferret module is loaded
if ( `gfdl_platform` == hpcs-csc ) then
   source $MODULESHOME/init/csh 
   module use -a /home/fms/local/modulefiles
   if (`echo '$M="ferret";@M=grep/^$M\/.*/,split/:/,$ENV{"LOADEDMODULES"};if($M[0]=~/^$M\/(.*)$/){print $1}'|perl` == "") then
      module load ferret
   endif

else
   echo "ERROR: invalid platform"
   exit 1
endif

if ($?path_list) then
   echo "Appending Ferret paths to FER_GO --" $path_list | tr : ' ' || goto err
   setenv FER_GO "`echo $FER_GO $path_list | tr : ' '`" || goto err
   echo "Appending Ferret paths to FER_PALETTE --" $path_list | tr : ' ' || goto err
   setenv FER_PALETTE "`echo $FER_PALETTE $path_list | tr : ' '`" || goto err
endif

   set ferret_com = "ferret -memsize $memsize -batch"
   set tmp = $TMPDIR/$name.$$

# =============== START BODY OF SCRIPT ==============
onintr catch

# clean up any pre-existing Ferret log files
set nonomatch
rm -f ferret.{jnl,jnl.*,*.jnl}
unset nonomatch

# create and enter the working directory
if ($?workdir) then
   set tmp = $workdir
endif
mkdir -p $tmp || goto err
cd $tmp || goto err

# Run the script by issuing a "go" within Ferret.  Other methods (e.g. piping
# the scriptfile directly to Ferret) don't seem to work properly.  Need the
# "quit" to keep Ferret from hanging if there's an error.   Remove GKS errors
# caused by batch mode, as they don't seem to matter; this is a bug that the
# Ferret developers need to fix.
$ferret_com << EOF |& grep -v -e "GKSM item 3 is undefined" -e "GKS not in proper state" || goto err
let pid = \`{spawn:"perl -e 'print getppid,0'"}\`
set mode journal ferret.\`pid\`.jnl
go "$ferret_script" $argv
quit
EOF

# clean up any Ferret journal files
set nonomatch
rm -f ferret.{jnl,jnl.*,*.jnl} # metafile.plt
unset nonomatch

# if requested, copy results to output directory
if ($?outdir) then
   mkdir -p $outdir || goto err
   mv -f $tmp/* $outdir || goto err
endif

# delete temporary directory if it wasn't user-specified
if (! $?workdir) then
   cd $curdir
   rm -r $tmp
   unset tmp
endif

onintr
# ================ END BODY OF SCRIPT ===============

exit 0

err:
   echo "==> ERROR caught in $name"
   if ($?tmp) then
      if (-e $tmp) then
         echo "Any output that may have been produced will be in: $tmp"
      endif
   endif
   echo "==> $name ABORTED on error."
   exit 1

catch:
   echo "==> INTERRUPT caught in $name"
   if ($?tmp) then
      if (-e $tmp) then
         echo "Any output that may have been produced will be in: $tmp"
      endif
   endif
   echo "==> $name ABORTED by user."
   exit 1

